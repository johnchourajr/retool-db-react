{"version":3,"sources":["../src/cli.ts","../src/lib/schemaGenerator.ts"],"sourcesContent":["import { Command } from \"commander\";\nimport { mkdirSync, writeFileSync } from \"fs\";\nimport path from \"path\";\nimport { Pool } from \"pg\";\nimport { generateTableTypes } from \"./lib/schemaGenerator\";\n\nfunction printProgress(current: number, total: number) {\n  const barWidth = 30;\n  const progress = Math.round((current / total) * barWidth);\n  const bar = \"▓\".repeat(progress) + \"░\".repeat(barWidth - progress);\n  const percentage = Math.round((current / total) * 100);\n  process.stdout.write(\n    `\\r[${bar}] ${percentage}% | ${current}/${total} tables`,\n  );\n}\n\nasync function generateTypes(options: any) {\n  if (!options.url) {\n    console.error(\"Error: Database URL is required\");\n    process.exit(1);\n  }\n\n  const pool = new Pool({\n    connectionString: options.url,\n  });\n\n  try {\n    mkdirSync(options.output, { recursive: true });\n\n    if (options.table) {\n      process.stdout.write(`Generating types for ${options.table} `);\n      const dots = setInterval(() => process.stdout.write(\".\"), 500);\n\n      const tableType = await generateTableTypes(options.table, pool);\n      clearInterval(dots);\n      process.stdout.write(\"\\n\");\n\n      const outputPath = path.join(options.output, `${options.table}.ts`);\n      writeFileSync(outputPath, tableType);\n      console.log(`✓ Types generated for table ${options.table}`);\n    } else {\n      process.stdout.write(\"Fetching tables...\\n\");\n      const tables = await pool.query(`\n       SELECT table_name\n       FROM information_schema.tables\n       WHERE table_schema = 'public'\n     `);\n\n      let typesContent = \"// Generated by retool-db-types\\n\\n\";\n      let count = 0;\n\n      for (const { table_name } of tables.rows) {\n        printProgress(count, tables.rows.length);\n        const tableType = await generateTableTypes(table_name, pool);\n        typesContent += tableType + \"\\n\\n\";\n        count++;\n      }\n\n      // Complete the progress bar\n      printProgress(tables.rows.length, tables.rows.length);\n      process.stdout.write(\"\\n\");\n\n      const outputPath = path.join(options.output, \"index.ts\");\n      writeFileSync(outputPath, typesContent);\n      console.log(\"\\n✓ Types generated successfully!\");\n    }\n  } catch (error: unknown) {\n    console.error(\n      \"\\n❌ Error:\",\n      error instanceof Error ? error.message : \"Unknown error\",\n    );\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\nconst program = new Command()\n  .name(\"retool-db-types\")\n  .description(\"Generate TypeScript types from your Retool database\")\n  .option(\"-u, --url <url>\", \"Database connection URL\")\n  .option(\"-o, --output <path>\", \"Output directory\", \"./src/types\")\n  .option(\"-t, --table <table>\", \"Specific table to generate types for\")\n  .addHelpText(\n    \"after\",\n    `\nExamples:\n $ retool-db-types --url=\"postgresql://...\" --table=users\n $ retool-db-types --url=\"postgresql://...\" --output=./types\n`,\n  )\n  .action(generateTypes);\n\nprogram.parse();\n","import { Pool } from \"pg\";\n\ninterface ColumnInfo {\n  column_name: string;\n  data_type: string;\n  is_nullable: string;\n}\n\nconst pgToTsType = (pgType: string, isNullable: boolean): string => {\n  const types: Record<string, string> = {\n    \"character varying\": \"string\",\n    varchar: \"string\",\n    text: \"string\",\n    integer: \"number\",\n    bigint: \"number\",\n    numeric: \"number\",\n    decimal: \"number\",\n    boolean: \"boolean\",\n    timestamp: \"Date\",\n    timestamptz: \"Date\",\n    date: \"Date\",\n    jsonb: \"Record<string, unknown>\",\n    json: \"Record<string, unknown>\",\n    uuid: \"string\",\n  };\n\n  const tsType = types[pgType] || \"unknown\";\n  return isNullable ? `${tsType} | null` : tsType;\n};\n\nexport async function generateTableTypes(\n  tableName: string,\n  pool: Pool,\n): Promise<string> {\n  const query = `\n    SELECT column_name, data_type, is_nullable\n    FROM information_schema.columns\n    WHERE table_name = $1\n    ORDER BY ordinal_position;\n  `;\n\n  const result = await pool.query<ColumnInfo>(query, [tableName]);\n  const columns = result.rows;\n\n  let typeDefinition = `export interface ${tableName.charAt(0).toUpperCase() + tableName.slice(1)} {\\n`;\n\n  columns.forEach((col) => {\n    const isNullable = col.is_nullable === \"YES\";\n    const tsType = pgToTsType(col.data_type, isNullable);\n    typeDefinition += `  ${col.column_name}: ${tsType};\\n`;\n  });\n\n  typeDefinition += \"}\";\n  return typeDefinition;\n}\n"],"mappings":"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","names":["path"]}