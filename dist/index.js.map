{"version":3,"sources":["../src/index.ts","../src/hooks/useRetoolDatabase.ts","../src/lib/retoolDbHandler.ts"],"sourcesContent":["export { useRetoolDatabase } from \"./hooks/useRetoolDatabase\";\n\nexport { retoolDbHandler } from \"./lib/retoolDbHandler\";\n","import { useCallback, useEffect, useState } from \"react\";\nimport { z } from \"zod\";\nimport type {\n  RetoolDatabaseConfig,\n  RetoolDatabaseError,\n  RetoolDatabaseOptions,\n} from \"../types\";\n\nexport function useRetoolDatabase<T>(\n  tableName: string,\n  options?: RetoolDatabaseOptions,\n  config: RetoolDatabaseConfig = {},\n) {\n  const baseUrl = config.baseUrl || \"/api/retool-db\";\n  const [data, setData] = useState<T[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<RetoolDatabaseError | null>(null);\n  const [schema, setSchema] = useState<z.ZodObject<any, any> | null>(null);\n\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(`${baseUrl}/${tableName}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(options || {}),\n      });\n      const result = await res.json();\n      if (!res.ok) throw new Error(result.error);\n      setData(result);\n    } catch (err) {\n      setError(\n        err instanceof Error\n          ? { message: err.message }\n          : { message: \"Unknown error\" },\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  }, [tableName, options, baseUrl]);\n\n  const insert = async (newData: Partial<T>) => {\n    if (schema) {\n      try {\n        schema.partial().parse(newData);\n      } catch (err) {\n        if (err instanceof z.ZodError) {\n          throw new Error(\n            `Validation error: ${err.errors.map((e) => e.message).join(\", \")}`,\n          );\n        }\n      }\n    }\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(`${baseUrl}/${tableName}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          mutation: {\n            type: \"INSERT\",\n            data: newData,\n          },\n        }),\n      });\n      const result = await res.json();\n      if (!res.ok) throw new Error(result.error);\n      setData((prev) => (prev ? [...prev, result] : [result]));\n      return result;\n    } catch (err) {\n      const error = {\n        message: err instanceof Error ? err.message : \"Unknown error\",\n      };\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const update = async (where: Partial<T>, updateData: Partial<T>) => {\n    if (schema) {\n      try {\n        schema.partial().parse(updateData);\n      } catch (err) {\n        if (err instanceof z.ZodError) {\n          throw new Error(\n            `Validation error: ${err.errors.map((e) => e.message).join(\", \")}`,\n          );\n        }\n      }\n    }\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(`${baseUrl}/${tableName}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          mutation: {\n            type: \"UPDATE\",\n            where,\n            data: updateData,\n          },\n        }),\n      });\n      const result = await res.json();\n      if (!res.ok) throw new Error(result.error);\n      setData((prev) => {\n        if (!prev) return result;\n        return prev.map((item) => {\n          const matches = Object.entries(where).every(\n            ([key, value]) => item[key as keyof T] === value,\n          );\n          return matches ? { ...item, ...updateData } : item;\n        });\n      });\n      return result;\n    } catch (err) {\n      const error = {\n        message: err instanceof Error ? err.message : \"Unknown error\",\n      };\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const remove = async (where: Partial<T>) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(`${baseUrl}/${tableName}`, {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          mutation: {\n            type: \"DELETE\",\n            where,\n          },\n        }),\n      });\n      const result = await res.json();\n      if (!res.ok) throw new Error(result.error);\n      setData((prev) => {\n        if (!prev) return null;\n        return prev.filter(\n          (item) =>\n            !Object.entries(where).every(\n              ([key, value]) => item[key as keyof T] === value,\n            ),\n        );\n      });\n      return result;\n    } catch (err) {\n      const error = {\n        message: err instanceof Error ? err.message : \"Unknown error\",\n      };\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return {\n    data,\n    isLoading,\n    error,\n    insert,\n    update,\n    remove,\n    refetch: fetchData,\n  };\n}\n","import { NextRequest, NextResponse } from \"next/server\";\nimport { Pool } from \"pg\";\nimport { RetoolMutation } from \"../types\";\n\nconst pool = new Pool({\n  connectionString: process.env.RETOOL_DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\nasync function handleSelect(tableName: string, body: any) {\n  if (body.query) {\n    const result = await pool.query({\n      text: body.query,\n      values: body.params || [],\n    });\n    return NextResponse.json(result.rows);\n  }\n\n  const result = await pool.query({\n    text: `SELECT * FROM \"${tableName}\" LIMIT $1`,\n    values: [body.limit || 100],\n  });\n  return NextResponse.json(result.rows);\n}\n\nexport async function retoolDbHandler(\n  req: NextRequest,\n  { params }: { params: { tableName: string } },\n) {\n  if (![\"GET\", \"POST\", \"PUT\", \"DELETE\"].includes(req.method || \"\")) {\n    return NextResponse.json({ error: \"Method not allowed\" }, { status: 405 });\n  }\n\n  const { tableName } = params;\n\n  try {\n    // Validate table name format\n    if (!/^[a-zA-Z0-9_]+$/.test(tableName)) {\n      throw new Error(\"Invalid table name format\");\n    }\n\n    // Get request body with default empty object\n    let body = {};\n    const contentType = req.headers.get(\"content-type\");\n    if (contentType?.includes(\"application/json\")) {\n      try {\n        const text = await req.text();\n        body = text ? JSON.parse(text) : {};\n      } catch (e) {\n        console.warn(\"Failed to parse JSON body:\", e);\n      }\n    }\n\n    // Verify table exists\n    const tableExists = await pool.query(\n      `\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables\n        WHERE table_name = $1\n      )\n    `,\n      [tableName],\n    );\n\n    if (!tableExists.rows[0].exists) {\n      return NextResponse.json(\n        { error: `Table '${tableName}' does not exist` },\n        { status: 404 },\n      );\n    }\n\n    switch (req.method) {\n      case \"POST\": {\n        if (\n          (body as { mutation?: RetoolMutation }).mutation?.type === \"INSERT\"\n        ) {\n          const { data } = (body as { mutation: RetoolMutation }).mutation;\n          const columns = Object.keys(data || {});\n          const values = Object.values(data || {});\n          const placeholders = values.map((_, i) => `$${i + 1}`);\n\n          const query = `\n            INSERT INTO \"${tableName}\" (${columns.join(\", \")})\n            VALUES (${placeholders.join(\", \")})\n            RETURNING *\n          `;\n\n          const result = await pool.query(query, values);\n          return NextResponse.json(result.rows[0]);\n        }\n\n        return handleSelect(tableName, body);\n      }\n\n      case \"PUT\": {\n        const { mutation } = body as { mutation: RetoolMutation };\n        if (!mutation?.where || !mutation?.data) {\n          throw new Error(\"Update requires where and data\");\n        }\n\n        const setColumns = Object.keys(mutation.data).map(\n          (key, i) => `${key} = $${i + 1}`,\n        );\n        const whereColumns = Object.keys(mutation.where).map(\n          (key, i) =>\n            `${key} = $${i + 1 + Object.keys(mutation.data || {}).length}`,\n        );\n\n        const query = `\n          UPDATE \"${tableName}\"\n          SET ${setColumns.join(\", \")}\n          WHERE ${whereColumns.join(\" AND \")}\n          RETURNING *\n        `;\n\n        const values = [\n          ...Object.values(mutation.data),\n          ...Object.values(mutation.where),\n        ];\n\n        const result = await pool.query(query, values);\n        return NextResponse.json(result.rows);\n      }\n\n      case \"DELETE\": {\n        const { mutation } = body as { mutation: RetoolMutation };\n        if (!mutation?.where) {\n          throw new Error(\"Delete requires where clause\");\n        }\n\n        const whereColumns = Object.keys(mutation.where).map(\n          (key, i) => `${key} = $${i + 1}`,\n        );\n\n        const query = `\n          DELETE FROM \"${tableName}\"\n          WHERE ${whereColumns.join(\" AND \")}\n          RETURNING *\n        `;\n\n        const result = await pool.query(query, Object.values(mutation.where));\n        return NextResponse.json(result.rows);\n      }\n\n      default:\n        return NextResponse.json(\n          { error: \"Method not allowed\" },\n          { status: 405 },\n        );\n    }\n  } catch (error) {\n    console.error(\"Database error:\", error);\n    return NextResponse.json(\n      {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        code: (error as any)?.code,\n        detail: (error as any)?.detail,\n      },\n      { status: 500 },\n    );\n  }\n}\n"],"mappings":"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","names":["error","result"]}