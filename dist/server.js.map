{"version":3,"sources":["../src/server.ts","../src/lib/retoolDbHandler.ts","../src/lib/queryRetoolDatabase.ts"],"sourcesContent":["// src/server.ts\n\nimport { retoolDbHandler } from \"./lib/retoolDbHandler\";\n\nimport { queryRetoolDatabase } from \"./lib/queryRetoolDatabase\";\n\nexport { queryRetoolDatabase, retoolDbHandler };\n","import { NextRequest, NextResponse } from \"next/server\";\nimport { Pool } from \"pg\";\nimport { RetoolMutation } from \"../types\";\n\nconst pool = new Pool({\n  connectionString: process.env.RETOOL_DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\nasync function handleSelect(tableName: string, body: any) {\n  if (body.query) {\n    const result = await pool.query({\n      text: body.query,\n      values: body.params || [],\n    });\n    return NextResponse.json(result.rows);\n  }\n\n  const result = await pool.query({\n    text: `SELECT * FROM \"${tableName}\" LIMIT $1`,\n    values: [body.limit || 100],\n  });\n  return NextResponse.json(result.rows);\n}\n\nexport async function retoolDbHandler(\n  request: NextRequest,\n  { params }: { params: { tableName: string } },\n): Promise<Response> {\n  if (![\"GET\", \"POST\", \"PUT\", \"DELETE\"].includes(request.method || \"\")) {\n    return NextResponse.json({ error: \"Method not allowed\" }, { status: 405 });\n  }\n\n  const { tableName } = \"then\" in params ? await params : params;\n\n  try {\n    // Validate table name format\n    if (!/^[a-zA-Z0-9_]+$/.test(tableName)) {\n      throw new Error(\"Invalid table name format\");\n    }\n\n    // Get request body with default empty object\n    let body = {};\n    const contentType = request.headers.get(\"content-type\");\n    if (contentType?.includes(\"application/json\")) {\n      try {\n        const text = await request.text();\n        body = text ? JSON.parse(text) : {};\n      } catch (e) {\n        console.warn(\"Failed to parse JSON body:\", e);\n      }\n    }\n\n    // Verify table exists\n    const tableExists = await pool.query(\n      `\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables\n        WHERE table_name = $1\n      )\n    `,\n      [tableName],\n    );\n\n    if (!tableExists.rows[0].exists) {\n      return NextResponse.json(\n        { error: `Table '${tableName}' does not exist` },\n        { status: 404 },\n      );\n    }\n\n    switch (request.method) {\n      case \"POST\": {\n        if (\n          (body as { mutation?: RetoolMutation }).mutation?.type === \"INSERT\"\n        ) {\n          const { data } = (body as { mutation: RetoolMutation }).mutation;\n          const columns = Object.keys(data || {});\n          const values = Object.values(data || {});\n          const placeholders = values.map((_, i) => `$${i + 1}`);\n\n          const query = `\n            INSERT INTO \"${tableName}\" (${columns.join(\", \")})\n            VALUES (${placeholders.join(\", \")})\n            RETURNING *\n          `;\n\n          const result = await pool.query(query, values);\n          return NextResponse.json(result.rows[0]);\n        }\n\n        return handleSelect(tableName, body);\n      }\n\n      case \"PUT\": {\n        const { mutation } = body as { mutation: RetoolMutation };\n        if (!mutation?.where || !mutation?.data) {\n          throw new Error(\"Update requires where and data\");\n        }\n\n        const setColumns = Object.keys(mutation.data).map(\n          (key, i) => `${key} = $${i + 1}`,\n        );\n        const whereColumns = Object.keys(mutation.where).map(\n          (key, i) =>\n            `${key} = $${i + 1 + Object.keys(mutation.data || {}).length}`,\n        );\n\n        const query = `\n          UPDATE \"${tableName}\"\n          SET ${setColumns.join(\", \")}\n          WHERE ${whereColumns.join(\" AND \")}\n          RETURNING *\n        `;\n\n        const values = [\n          ...Object.values(mutation.data),\n          ...Object.values(mutation.where),\n        ];\n\n        const result = await pool.query(query, values);\n        return NextResponse.json(result.rows);\n      }\n\n      case \"DELETE\": {\n        const { mutation } = body as { mutation: RetoolMutation };\n        if (!mutation?.where) {\n          throw new Error(\"Delete requires where clause\");\n        }\n\n        const whereColumns = Object.keys(mutation.where).map(\n          (key, i) => `${key} = $${i + 1}`,\n        );\n\n        const query = `\n          DELETE FROM \"${tableName}\"\n          WHERE ${whereColumns.join(\" AND \")}\n        `;\n\n        const result = await pool.query(query, Object.values(mutation.where));\n        return NextResponse.json(result.rows);\n      }\n\n      default:\n        return NextResponse.json(\n          { error: \"Method not allowed\" },\n          { status: 405 },\n        );\n    }\n  } catch (error) {\n    console.error(\"Database error:\", error);\n    return NextResponse.json(\n      {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        code: (error as any)?.code,\n        detail: (error as any)?.detail,\n      },\n      { status: 500 },\n    );\n  }\n}\n","import { Pool } from \"pg\";\nimport { RetoolDatabaseOptions } from \"../types\";\n\nexport async function queryRetoolDatabase<T>(\n  tableName: string,\n  options?: RetoolDatabaseOptions,\n) {\n  const pool = new Pool({\n    connectionString: process.env.RETOOL_DATABASE_URL,\n  });\n\n  try {\n    if (options?.query) {\n      const result = await pool.query({\n        text: options.query,\n        values: options.params || [],\n      });\n      return result.rows as T[];\n    }\n\n    const result = await pool.query({\n      text: `SELECT * FROM \"${tableName}\" LIMIT $1`,\n      values: [options?.limit || 100],\n    });\n    return result.rows as T[];\n  } catch (error) {\n    throw error;\n  } finally {\n    await pool.end();\n  }\n}\n"],"mappings":"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","names":["result","import_pg","pool","result"]}