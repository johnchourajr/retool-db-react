import { Command } from "commander";
import { mkdirSync, writeFileSync } from "fs";
import ora, { Ora } from "ora";
import path from "path";
import { Pool } from "pg";
import { generateTableTypes } from "./lib/schemaGenerator";

async function generateTypes(options: any, spinner: Ora) {
  if (!options.url) {
    spinner.fail("Error: Database URL is required");
    process.exit(1);
  }

  const pool = new Pool({
    connectionString: options.url,
  });

  try {
    mkdirSync(options.output, { recursive: true });

    if (options.table) {
      spinner.text = `Generating types for ${options.table}`;
      const tableType = await generateTableTypes(options.table, pool);
      const outputPath = path.join(options.output, `${options.table}.ts`);
      writeFileSync(outputPath, tableType);
      spinner.succeed(`Types generated for table ${options.table}`);
    } else {
      spinner.text = "Fetching tables";
      const tables = await pool.query(`
       SELECT table_name
       FROM information_schema.tables
       WHERE table_schema = 'public'
     `);

      let typesContent = "// Generated by retool-db-types\n\n";

      spinner.text = `Generating types for ${tables.rows.length} tables`;
      for (const { table_name } of tables.rows) {
        spinner.text = `Processing ${table_name}`;
        const tableType = await generateTableTypes(table_name, pool);
        typesContent += tableType + "\n\n";
      }

      const outputPath = path.join(options.output, "index.ts");
      writeFileSync(outputPath, typesContent);
      spinner.succeed("Types generated successfully!");
    }
  } catch (error: unknown) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    spinner.fail(errorMessage);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

const program = new Command()
  .name("retool-db-types")
  .description("Generate TypeScript types from your Retool database")
  .option("-u, --url <url>", "Database connection URL")
  .option("-o, --output <path>", "Output directory", "./src/types")
  .option("-t, --table <table>", "Specific table to generate types for")
  .addHelpText(
    "after",
    `
Examples:
 $ retool-db-types --url="postgresql://..." --table=users
 $ retool-db-types --url="postgresql://..." --output=./types`,
  )
  .action(async (options) => {
    const spinner = ora("Starting...").start();
    try {
      await generateTypes(options, spinner);
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      spinner.fail(errorMessage);
      process.exit(1);
    }
  });

program.parse();
