#!/usr/bin/env node

import { Command } from "commander";
import { mkdirSync, writeFileSync } from "fs";
import path from "path";
import { Pool } from "pg";
import { generateTableTypes } from "./lib/schemaGenerator";

const program = new Command();

program
  .name("retool-db-types")
  .description("Generate TypeScript types from your Retool database")
  .option("-u, --url <url>", "Database connection URL (required)")
  .option(
    "-o, --output <path>",
    "Output directory (default: ./src/types)",
    "./src/types",
  )
  .option("-t, --table <table>", "Specific table to generate types for")
  .option("-f, --filter <pattern>", "Regex pattern to filter tables")
  .option(
    "-e, --extension <ext>",
    "Output file extension (default: .ts)",
    ".ts",
  )
  .option("-c, --config <path>", "Path to configuration file")
  .parse(process.argv);

const options = program.opts();

async function generateTypes() {
  try {
    const {
      url,
      output,
      table,
      filter,
      extension,
      config: configPath,
    } = options;

    // Load configuration from file if provided
    const config = configPath ? await loadConfig(configPath) : {};

    // Use config values or command line options
    const connectionUrl = url || config.url;
    const outputDir = output || config.output || "./src/types";
    const tableFilter = filter || config.tableFilter;

    if (!connectionUrl) {
      throw new Error("Database URL is required");
    }

    const pool = new Pool({
      connectionString: connectionUrl,
    });

    // Create output directory if it doesn't exist
    mkdirSync(outputDir, { recursive: true });

    if (table) {
      // Generate types for specific table
      const tableType = await generateTableTypes(table, pool);
      const outputPath = path.join(outputDir, `${table}${extension}`);
      writeFileSync(outputPath, tableType);
      console.log(`Types generated for table ${table}`);
    } else {
      // Generate types for all tables
      const tableQuery = `
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public'
        ${tableFilter ? `AND table_name SIMILAR TO '${tableFilter}'` : ""}
      `;

      const { rows } = await pool.query(tableQuery);
      let typesContent = "// Generated by retool-db-types\n\n";

      for (const { table_name } of rows) {
        const tableType = await generateTableTypes(table_name, pool);
        typesContent += tableType + "\n\n";
        console.log(`Types generated for table ${table_name}`);
      }

      const outputPath = path.join(outputDir, `index${extension}`);
      writeFileSync(outputPath, typesContent);
      console.log("Types generated for all tables!");
    }

    await pool.end();
  } catch (error) {
    console.error("Error generating types:", error);
    process.exit(1);
  }
}

type Config = {
  url?: string;
  output?: string;
  tableFilter?: string;
};

async function loadConfig(configPath: string): Promise<Config> {
  try {
    const config: Config = await import(configPath);
    return config;
  } catch (error) {
    console.error("Error loading config file:", error);
    return {};
  }
}

generateTypes();
