#!/usr/bin/env node

import { Command } from "commander";
import { mkdirSync, writeFileSync } from "fs";
import path from "path";
import { Pool } from "pg";
import { generateTableTypes } from "./lib/schemaGenerator";

const program = new Command();

program
  .name("retool-db-types")
  .description("Generate TypeScript types from your Retool database")
  .option("-u, --url <url>", "Database connection URL")
  .option("-o, --output <path>", "Output directory", "./src/types")
  .option("-t, --table <table>", "Specific table to generate types for")
  .parse(process.argv);

const options = program.opts();

async function generateTypes() {
  if (!options.url) {
    console.error("Error: Database URL is required");
    process.exit(1);
  }

  const pool = new Pool({
    connectionString: options.url,
  });

  try {
    // Create output directory if it doesn't exist
    mkdirSync(options.output, { recursive: true });

    if (options.table) {
      // Generate types for specific table
      const tableType = await generateTableTypes(options.table, pool);
      const outputPath = path.join(options.output, `${options.table}.ts`);
      writeFileSync(outputPath, tableType);
      console.log(`Types generated for table ${options.table}`);
    } else {
      // Generate types for all tables
      const tableQuery = `
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public'
      `;

      const tables = await pool.query(tableQuery);

      let typesContent = "// Generated by retool-db-types\n\n";

      for (const { table_name } of tables.rows) {
        const tableType = await generateTableTypes(table_name, pool);
        typesContent += tableType + "\n\n";
      }

      const outputPath = path.join(options.output, "index.ts");
      writeFileSync(outputPath, typesContent);
      console.log("Types generated for all tables!");
    }
  } catch (error) {
    console.error("Error generating types:", error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

generateTypes();
