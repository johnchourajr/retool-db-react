import { Command } from "commander";
import { mkdirSync, writeFileSync } from "fs";
import path from "path";
import { Pool } from "pg";
import { generateTableTypes } from "./lib/schemaGenerator";

function printProgress(current: number, total: number) {
  const barWidth = 30;
  const progress = Math.round((current / total) * barWidth);
  const bar = "▓".repeat(progress) + "░".repeat(barWidth - progress);
  const percentage = Math.round((current / total) * 100);
  process.stdout.write(
    `\r[${bar}] ${percentage}% | ${current}/${total} tables`,
  );
}

async function generateTypes(options: any) {
  if (!options.url) {
    console.error("Error: Database URL is required");
    process.exit(1);
  }

  const pool = new Pool({
    connectionString: options.url,
  });

  try {
    mkdirSync(options.output, { recursive: true });

    if (options.table) {
      process.stdout.write(`Generating types for ${options.table} `);
      const dots = setInterval(() => process.stdout.write("."), 500);

      const tableType = await generateTableTypes(options.table, pool);
      clearInterval(dots);
      process.stdout.write("\n");

      const outputPath = path.join(options.output, `${options.table}.ts`);
      writeFileSync(outputPath, tableType);
      console.log(`✓ Types generated for table ${options.table}`);
    } else {
      process.stdout.write("Fetching tables...\n");
      const tables = await pool.query(`
       SELECT table_name
       FROM information_schema.tables
       WHERE table_schema = 'public'
     `);

      let typesContent = "// Generated by retool-db-types\n\n";
      let count = 0;

      for (const { table_name } of tables.rows) {
        printProgress(count, tables.rows.length);
        const tableType = await generateTableTypes(table_name, pool);
        typesContent += tableType + "\n\n";
        count++;
      }

      // Complete the progress bar
      printProgress(tables.rows.length, tables.rows.length);
      process.stdout.write("\n");

      const outputPath = path.join(options.output, "index.ts");
      writeFileSync(outputPath, typesContent);
      console.log("\n✓ Types generated successfully!");
    }
  } catch (error: unknown) {
    console.error(
      "\n❌ Error:",
      error instanceof Error ? error.message : "Unknown error",
    );
    process.exit(1);
  } finally {
    await pool.end();
  }
}

const program = new Command()
  .name("retool-db-types")
  .description("Generate TypeScript types from your Retool database")
  .option("-u, --url <url>", "Database connection URL")
  .option("-o, --output <path>", "Output directory", "./src/types")
  .option("-t, --table <table>", "Specific table to generate types for")
  .addHelpText(
    "after",
    `
Examples:
 $ retool-db-types --url="postgresql://..." --table=users
 $ retool-db-types --url="postgresql://..." --output=./types
`,
  )
  .action(generateTypes);

program.parse();
